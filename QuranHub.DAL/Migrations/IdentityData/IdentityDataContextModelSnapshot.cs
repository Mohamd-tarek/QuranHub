// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuranHub.DAL.Database;

#nullable disable

namespace QuranHub.DAL.Migrations.IdentityData
{
    [DbContext(typeof(IdentityDataContext))]
    partial class IdentityDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-preview.3.23174.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommentId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("QuranHubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReactsCount")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VerseId")
                        .HasColumnType("int");

                    b.HasKey("CommentId");

                    b.HasIndex("QuranHubUserId");

                    b.HasIndex("VerseId");

                    b.ToTable("Comments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Comment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Follow", b =>
                {
                    b.Property<int>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FollowId"));

                    b.Property<int>("Comments")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("FollowedId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<int>("Shares")
                        .HasColumnType("int");

                    b.HasKey("FollowId");

                    b.HasIndex("FollowedId");

                    b.HasIndex("FollowerId");

                    b.ToTable("Follows");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<int>("Aya")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<string>("QuranHubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Sura")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteId");

                    b.HasIndex("QuranHubUserId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.Property<string>("SourceUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TargetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.HasIndex("SourceUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Notifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Notification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"));

                    b.Property<int>("CommentsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<int>("Privacy")
                        .HasColumnType("int");

                    b.Property<string>("QuranHubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ReactsCount")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VerseId")
                        .HasColumnType("int");

                    b.HasKey("PostId");

                    b.HasIndex("QuranHubUserId");

                    b.HasIndex("VerseId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Post");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PrivacySetting", b =>
                {
                    b.Property<int>("PrivacySettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrivacySettingId"));

                    b.Property<bool>("AppearInSearch")
                        .HasColumnType("bit");

                    b.Property<int>("CommentResolution")
                        .HasColumnType("int");

                    b.Property<int>("FollowResolution")
                        .HasColumnType("int");

                    b.Property<string>("QuranHubUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ShareResolution")
                        .HasColumnType("int");

                    b.HasKey("PrivacySettingId");

                    b.HasIndex("QuranHubUserId")
                        .IsUnique();

                    b.ToTable("PrivacySettings");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.QuranHubUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AboutMe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("CoverPicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Religion")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("QuranHub.Domain.Models.React", b =>
                {
                    b.Property<int>("ReactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReactId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("QuranHubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ReactId");

                    b.ToTable("Reacts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("React");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Share", b =>
                {
                    b.Property<int>("ShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShareId"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("QuranHubUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ShareId");

                    b.HasIndex("QuranHubUserId");

                    b.ToTable("Shares");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Share");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Verse", b =>
                {
                    b.Property<int>("VerseId")
                        .HasColumnType("int");

                    b.Property<int>("Aya")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("Sura")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VerseId");

                    b.ToTable("Verses");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostComment", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Comment");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostComment");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Notification");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasIndex("CommentId")
                        .IsUnique()
                        .HasFilter("[CommentId] IS NOT NULL");

                    b.ToTable("Notifications", t =>
                        {
                            t.Property("CommentId")
                                .HasColumnName("CommentNotification_CommentId");
                        });

                    b.HasDiscriminator().HasValue("CommentNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.FollowNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Notification");

                    b.Property<int>("FollowId")
                        .HasColumnType("int");

                    b.HasIndex("FollowId")
                        .IsUnique()
                        .HasFilter("[FollowId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("FollowNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ReactNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Notification");

                    b.Property<int>("ReactId")
                        .HasColumnType("int");

                    b.HasIndex("ReactId")
                        .IsUnique()
                        .HasFilter("[ReactId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ReactNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ShareNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Notification");

                    b.Property<int>("ShareId")
                        .HasColumnType("int");

                    b.HasIndex("ShareId")
                        .IsUnique()
                        .HasFilter("[ShareId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("ShareNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ShareablePost", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Post");

                    b.Property<int>("SharesCount")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ShareablePost");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.SharedPost", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Post");

                    b.Property<int?>("ShareId")
                        .HasColumnType("int");

                    b.HasIndex("ShareId")
                        .IsUnique()
                        .HasFilter("[ShareId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SharedPost");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentReact", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.React");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.HasIndex("CommentId");

                    b.HasIndex("QuranHubUserId");

                    b.HasDiscriminator().HasValue("CommentReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostReact", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.React");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasIndex("QuranHubUserId");

                    b.HasDiscriminator().HasValue("PostReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostShare", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.Share");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasDiscriminator().HasValue("PostShare");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.CommentNotification");

                    b.Property<int>("PostCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.ToTable("Notifications", t =>
                        {
                            t.Property("CommentId")
                                .HasColumnName("CommentNotification_CommentId");
                        });

                    b.HasDiscriminator().HasValue("PostCommentNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentReactNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.ReactNotification");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("CommentReactId")
                        .HasColumnType("int");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommentReactId")
                        .IsUnique()
                        .HasFilter("[CommentReactId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("CommentReactNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostReactNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.ReactNotification");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PostReactId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasIndex("PostReactId")
                        .IsUnique()
                        .HasFilter("[PostReactId] IS NOT NULL");

                    b.ToTable("Notifications", t =>
                        {
                            t.Property("PostId")
                                .HasColumnName("PostReactNotification_PostId");
                        });

                    b.HasDiscriminator().HasValue("PostReactNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostShareNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.ShareNotification");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.Property<int>("PostShareId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasIndex("PostShareId")
                        .IsUnique()
                        .HasFilter("[PostShareId] IS NOT NULL");

                    b.ToTable("Notifications", t =>
                        {
                            t.Property("PostId")
                                .HasColumnName("PostShareNotification_PostId");
                        });

                    b.HasDiscriminator().HasValue("PostShareNotification");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentReact", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.CommentReact");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.ToTable("Reacts", t =>
                        {
                            t.Property("PostId")
                                .HasColumnName("PostCommentReact_PostId");
                        });

                    b.HasDiscriminator().HasValue("PostCommentReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentReactNotification", b =>
                {
                    b.HasBaseType("QuranHub.Domain.Models.CommentReactNotification");

                    b.Property<int?>("PostCommentCommentId")
                        .HasColumnType("int");

                    b.Property<int>("PostCommentReactId")
                        .HasColumnType("int");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasIndex("PostCommentCommentId");

                    b.HasIndex("PostCommentReactId");

                    b.HasIndex("PostId");

                    b.ToTable("Notifications", t =>
                        {
                            t.Property("PostId")
                                .HasColumnName("PostCommentReactNotification_PostId");
                        });

                    b.HasDiscriminator().HasValue("PostCommentReactNotification");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Comment", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("Commnets")
                        .HasForeignKey("QuranHubUserId");

                    b.HasOne("QuranHub.Domain.Models.Verse", "Verse")
                        .WithMany("Comments")
                        .HasForeignKey("VerseId");

                    b.Navigation("QuranHubUser");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Follow", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "Followed")
                        .WithMany("Followers")
                        .HasForeignKey("FollowedId")
                        .IsRequired()
                        .HasConstraintName("FK_Followed_QuranHubUsers");

                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "Follower")
                        .WithMany("Following")
                        .HasForeignKey("FollowerId")
                        .IsRequired()
                        .HasConstraintName("FK_Following_QuranHubUsers");

                    b.Navigation("Followed");

                    b.Navigation("Follower");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Note", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("Notes")
                        .HasForeignKey("QuranHubUserId");

                    b.Navigation("QuranHubUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Notification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "SourceUser")
                        .WithMany("SourceNotifications")
                        .HasForeignKey("SourceUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Source_QuranHubUsers");

                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "TargetUser")
                        .WithMany("TargetNotifications")
                        .HasForeignKey("TargetUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Target_QuranHubUsers");

                    b.Navigation("SourceUser");

                    b.Navigation("TargetUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Post", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("Posts")
                        .HasForeignKey("QuranHubUserId");

                    b.HasOne("QuranHub.Domain.Models.Verse", "Verse")
                        .WithMany("Posts")
                        .HasForeignKey("VerseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuranHubUser");

                    b.Navigation("Verse");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PrivacySetting", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithOne("PrivacySetting")
                        .HasForeignKey("QuranHub.Domain.Models.PrivacySetting", "QuranHubUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuranHubUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Share", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("Shares")
                        .HasForeignKey("QuranHubUserId");

                    b.Navigation("QuranHubUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostComment", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Comment", "Comment")
                        .WithOne("CommentNotification")
                        .HasForeignKey("QuranHub.Domain.Models.CommentNotification", "CommentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentNotification_Comment_CommentId");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.FollowNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Follow", "Follow")
                        .WithOne("FollowNotification")
                        .HasForeignKey("QuranHub.Domain.Models.FollowNotification", "FollowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Follow");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ReactNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.React", "React")
                        .WithOne("ReactNotification")
                        .HasForeignKey("QuranHub.Domain.Models.ReactNotification", "ReactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ReactNotification_React_ReactId");

                    b.Navigation("React");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ShareNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Share", "Share")
                        .WithOne("ShareNotification")
                        .HasForeignKey("QuranHub.Domain.Models.ShareNotification", "ShareId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShareNotification_Share_ShareId");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.SharedPost", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.PostShare", "Share")
                        .WithOne("SharedPost")
                        .HasForeignKey("QuranHub.Domain.Models.SharedPost", "ShareId");

                    b.Navigation("Share");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentReact", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Comment", "Comment")
                        .WithMany("Reacts")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentReact_Comment_CommentId");

                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("CommnetReacts")
                        .HasForeignKey("QuranHubUserId");

                    b.Navigation("Comment");

                    b.Navigation("QuranHubUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostReact", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany("Reacts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostReact_Post_PostId");

                    b.HasOne("QuranHub.Domain.Models.QuranHubUser", "QuranHubUser")
                        .WithMany("PostReacts")
                        .HasForeignKey("QuranHubUserId");

                    b.Navigation("Post");

                    b.Navigation("QuranHubUser");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostShare", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.ShareablePost", "Post")
                        .WithMany("Shares")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.PostComment", "PostComment")
                        .WithOne("PostCommentNotification")
                        .HasForeignKey("QuranHub.Domain.Models.PostCommentNotification", "CommentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostCommentNotification_PostComment_CommentId");

                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany("PostCommentNotifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostCommentNotification_Post_PostId");

                    b.Navigation("Post");

                    b.Navigation("PostComment");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentReactNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Comment", "Comment")
                        .WithMany("CommentReactNotifications")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentReactNotification_Comment_CommentId");

                    b.HasOne("QuranHub.Domain.Models.CommentReact", "CommentReact")
                        .WithOne("CommentReactNotification")
                        .HasForeignKey("QuranHub.Domain.Models.CommentReactNotification", "CommentReactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_CommentReactNotification_CommentReact_CommentReactId");

                    b.Navigation("Comment");

                    b.Navigation("CommentReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostReactNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany("PostReactNotifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostReactNotification_Post_PostId");

                    b.HasOne("QuranHub.Domain.Models.PostReact", "PostReact")
                        .WithOne("PostReactNotification")
                        .HasForeignKey("QuranHub.Domain.Models.PostReactNotification", "PostReactId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostReactNotification_PostReact_PostReactId");

                    b.Navigation("Post");

                    b.Navigation("PostReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostShareNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.ShareablePost", "Post")
                        .WithMany("PostShareNotifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostShareNotification_ShareablePost_PostId");

                    b.HasOne("QuranHub.Domain.Models.PostShare", "PostShare")
                        .WithOne("PostShareNotification")
                        .HasForeignKey("QuranHub.Domain.Models.PostShareNotification", "PostShareId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShareNotification_PostShare_PostShareId");

                    b.Navigation("Post");

                    b.Navigation("PostShare");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentReact", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostCommentReactNotification", b =>
                {
                    b.HasOne("QuranHub.Domain.Models.PostComment", null)
                        .WithMany("PostCommentReactNotifications")
                        .HasForeignKey("PostCommentCommentId");

                    b.HasOne("QuranHub.Domain.Models.PostCommentReact", "PostCommentReact")
                        .WithMany()
                        .HasForeignKey("PostCommentReactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuranHub.Domain.Models.Post", "Post")
                        .WithMany("PostCommentReactNotifications")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("FK_PostCommentReactNotification_Post_PostId");

                    b.Navigation("Post");

                    b.Navigation("PostCommentReact");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Comment", b =>
                {
                    b.Navigation("CommentNotification")
                        .IsRequired();

                    b.Navigation("CommentReactNotifications");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Follow", b =>
                {
                    b.Navigation("FollowNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("PostCommentNotifications");

                    b.Navigation("PostCommentReactNotifications");

                    b.Navigation("PostReactNotifications");

                    b.Navigation("Reacts");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.QuranHubUser", b =>
                {
                    b.Navigation("CommnetReacts");

                    b.Navigation("Commnets");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Notes");

                    b.Navigation("PostReacts");

                    b.Navigation("Posts");

                    b.Navigation("PrivacySetting")
                        .IsRequired();

                    b.Navigation("Shares");

                    b.Navigation("SourceNotifications");

                    b.Navigation("TargetNotifications");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.React", b =>
                {
                    b.Navigation("ReactNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Share", b =>
                {
                    b.Navigation("ShareNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.Verse", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostComment", b =>
                {
                    b.Navigation("PostCommentNotification")
                        .IsRequired();

                    b.Navigation("PostCommentReactNotifications");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.ShareablePost", b =>
                {
                    b.Navigation("PostShareNotifications");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("QuranHub.Domain.Models.CommentReact", b =>
                {
                    b.Navigation("CommentReactNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostReact", b =>
                {
                    b.Navigation("PostReactNotification")
                        .IsRequired();
                });

            modelBuilder.Entity("QuranHub.Domain.Models.PostShare", b =>
                {
                    b.Navigation("PostShareNotification")
                        .IsRequired();

                    b.Navigation("SharedPost")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
